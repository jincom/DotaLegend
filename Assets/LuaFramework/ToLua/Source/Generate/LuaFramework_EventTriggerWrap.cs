//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_EventTriggerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.EventTrigger), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Get", Get);
		L.RegFunction("OnBeginDrag", OnBeginDrag);
		L.RegFunction("OnCancel", OnCancel);
		L.RegFunction("OnDeselect", OnDeselect);
		L.RegFunction("OnDrag", OnDrag);
		L.RegFunction("OnDrop", OnDrop);
		L.RegFunction("OnEndDrag", OnEndDrag);
		L.RegFunction("OnInitializePotentialDrag", OnInitializePotentialDrag);
		L.RegFunction("OnMove", OnMove);
		L.RegFunction("OnPointerClick", OnPointerClick);
		L.RegFunction("OnPointerDown", OnPointerDown);
		L.RegFunction("OnPointerEnter", OnPointerEnter);
		L.RegFunction("OnPointerExit", OnPointerExit);
		L.RegFunction("OnPointerUp", OnPointerUp);
		L.RegFunction("OnScroll", OnScroll);
		L.RegFunction("OnSelect", OnSelect);
		L.RegFunction("OnSubmit", OnSubmit);
		L.RegFunction("OnUpdateSelected", OnUpdateSelected);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsPassEvent", get_IsPassEvent, set_IsPassEvent);
		L.RegVar("onEnter", get_onEnter, set_onEnter);
		L.RegVar("onExit", get_onExit, set_onExit);
		L.RegVar("onDown", get_onDown, set_onDown);
		L.RegVar("onUp", get_onUp, set_onUp);
		L.RegVar("onClick", get_onClick, set_onClick);
		L.RegVar("onInitializePotentialDrag", get_onInitializePotentialDrag, set_onInitializePotentialDrag);
		L.RegVar("onBeginDrag", get_onBeginDrag, set_onBeginDrag);
		L.RegVar("onDrag", get_onDrag, set_onDrag);
		L.RegVar("onEndDrag", get_onEndDrag, set_onEndDrag);
		L.RegVar("onDrop", get_onDrop, set_onDrop);
		L.RegVar("onScroll", get_onScroll, set_onScroll);
		L.RegVar("onSelect", get_onSelect, set_onSelect);
		L.RegVar("onUpdateSelected", get_onUpdateSelected, set_onUpdateSelected);
		L.RegVar("onDeselect", get_onDeselect, set_onDeselect);
		L.RegVar("onMove", get_onMove, set_onMove);
		L.RegVar("onSubmit", get_onSubmit, set_onSubmit);
		L.RegVar("onCancel", get_onCancel, set_onCancel);
		L.RegFunction("BaseDelegate", LuaFramework_EventTrigger_BaseDelegate);
		L.RegFunction("AxisDelegate", LuaFramework_EventTrigger_AxisDelegate);
		L.RegFunction("PointerDelegate", LuaFramework_EventTrigger_PointerDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			LuaFramework.EventTrigger o = LuaFramework.EventTrigger.Get(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBeginDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnBeginDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCancel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnCancel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDeselect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnDeselect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnDrop(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEndDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnEndDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInitializePotentialDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnInitializePotentialDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.AxisEventData arg0 = (UnityEngine.EventSystems.AxisEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.AxisEventData));
			obj.OnMove(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerDown(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerEnter(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerExit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerUp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnScroll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnScroll(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSelect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnSelect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSubmit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnSubmit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdateSelected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnUpdateSelected(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPassEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)o;
			bool ret = obj.IsPassEvent;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPassEvent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onEnter(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onEnter"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onExit(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onExit"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDown(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onDown"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUp(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onUp"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onClick(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onClick"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onInitializePotentialDrag(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onInitializePotentialDrag"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onBeginDrag(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onBeginDrag"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDrag(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onDrag"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onEndDrag(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onEndDrag"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDrop(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onDrop"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onScroll(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onScroll"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onSelect(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onSelect"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateSelected(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onUpdateSelected"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDeselect(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onDeselect"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onMove(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onMove"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onSubmit(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onSubmit"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCancel(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.EventTrigger.onCancel"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsPassEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsPassEvent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPassEvent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onEnter(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onEnter' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onEnter += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onEnter");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onEnter -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onExit(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onExit' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onExit += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onExit");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onExit -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDown(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onDown' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onDown += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onDown");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onDown -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUp(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onUp' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onUp += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onUp");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onUp -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onClick(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onClick' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onClick += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onClick");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onClick -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onInitializePotentialDrag(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onInitializePotentialDrag' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onInitializePotentialDrag += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onInitializePotentialDrag");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onInitializePotentialDrag -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onBeginDrag(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onBeginDrag' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onBeginDrag += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onBeginDrag");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onBeginDrag -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDrag(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onDrag' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onDrag += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onDrag");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onDrag -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onEndDrag(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onEndDrag' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onEndDrag += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onEndDrag");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onEndDrag -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDrop(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onDrop' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onDrop += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onDrop");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onDrop -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onScroll(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onScroll' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), arg0.func);
				obj.onScroll += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.PointerDelegate ev = (LuaFramework.EventTrigger.PointerDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onScroll");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.PointerDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onScroll -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onSelect(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onSelect' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.BaseDelegate), arg0.func);
				obj.onSelect += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onSelect");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.BaseDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onSelect -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateSelected(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onUpdateSelected' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.BaseDelegate), arg0.func);
				obj.onUpdateSelected += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onUpdateSelected");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.BaseDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onUpdateSelected -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDeselect(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onDeselect' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.BaseDelegate), arg0.func);
				obj.onDeselect += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onDeselect");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.BaseDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onDeselect -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onMove(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onMove' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.AxisDelegate ev = (LuaFramework.EventTrigger.AxisDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.AxisDelegate), arg0.func);
				obj.onMove += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.AxisDelegate ev = (LuaFramework.EventTrigger.AxisDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onMove");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.AxisDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onMove -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onSubmit(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onSubmit' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.BaseDelegate), arg0.func);
				obj.onSubmit += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onSubmit");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.BaseDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onSubmit -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCancel(IntPtr L)
	{
		try
		{
			LuaFramework.EventTrigger obj = (LuaFramework.EventTrigger)ToLua.CheckObject(L, 1, typeof(LuaFramework.EventTrigger));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.EventTrigger.onCancel' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.EventTrigger'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.BaseDelegate), arg0.func);
				obj.onCancel += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.EventTrigger.BaseDelegate ev = (LuaFramework.EventTrigger.BaseDelegate)LuaMisc.GetEventHandler(obj, typeof(LuaFramework.EventTrigger), "onCancel");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.EventTrigger.BaseDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onCancel -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaFramework_EventTrigger_BaseDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.BaseDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.BaseDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaFramework_EventTrigger_AxisDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.AxisDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.AxisDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaFramework_EventTrigger_PointerDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(LuaFramework.EventTrigger.PointerDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

